# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right

class Solution:   
    def isSubtree(self, root: Optional[TreeNode], subRoot: Optional[TreeNode]) -> bool:
        #An empty tree is a subtree of a nonempty tree
        if not subRoot:
            return True
        #If we reach a leaf node in both subtrees then there is no subtree
        if not root:
            return False

        #If the root value is equal to the subRoot
        if root.val == subRoot.val:
            #Check if they have the same subtree, if it returns true then that tells us
            #There exists a subtree within the tree equal to the target subtree
            if self.helper(root, subRoot):
                return True
        
        #Check the left and right subtrees
        return self.isSubtree(root.left, subRoot) or self.isSubtree(root.right, subRoot)

    def helper(self, p, q):
        
        if not p and not q:
            return True
        
        if not p and q:
            return False
        
        if not q and p:
            return False
        
        if p.val != q.val:
            return False
        
        return (True and self.helper(p.left, q.left) and self.helper(p.right, q.right))
        
        
            
